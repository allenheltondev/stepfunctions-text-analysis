AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Analyze blog post text

Metadata:
  esbuild-properties: &esbuild-properties
    Format: esm
    Minify: true
    OutExtension:
      - .js=.mjs
    Target: es2020
    Sourcemap: false
    EntryPoints:
      - index.mjs
    Banner:
      - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);
    External:
      - '@aws-sdk/*'

Parameters:
  GitHubOwner:
    Type: String
  GitHubRepo:
    Type: String
  BucketName:
    Type: String
    Description: Name of the S3 Bucket to store generated audio
  Environment:
    Type: String
    AllowedValues: [ sandbox, stage, production ]
    Default: sandbox

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']

Globals:
  Function:
    Runtime: nodejs20.x
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 3
    MemorySize: 1024
    CodeUri: functions
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:
  BlogAnalysisTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S

  MarkdownToTextFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - markdown-to-text.mjs
    Properties:
      Handler: markdown-to-text.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/serverless-toolbox/secrets}}"
      Environment:
        Variables:
          OWNER: !Ref GitHubOwner
          REPO: !Ref GitHubRepo
          SECRET_ID: "{{resolve:ssm:/serverless-toolbox/secrets}}"

  TextSynthesisCompleteTopic:
    Type: AWS::SNS::Topic

  ResumeWorkflowAfterSynthesisFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - resume-after-synthesis.mjs
    Properties:
      Handler: resume-after-synthesis.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt BlogAnalysisTable.Arn
            - Effect: Allow
              Action: states:SendTaskSuccess
              Resource: '*'
      Environment:
        Variables:
          TABLE_NAME: !Ref BlogAnalysisTable
      Events:
        JobComplete:
          Type: SNS
          Properties:
            SqsSubscription: true
            Topic: !Ref TextSynthesisCompleteTopic

  UpdateInGitHubFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - update-in-github.mjs
    Properties:
      Handler: update-in-github.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: "{{resolve:ssm:/serverless-toolbox/secrets}}"
      Environment:
        Variables:
          OWNER: !Ref GitHubOwner
          REPO: !Ref GitHubRepo
          CONTENT_PATH: content/blog
          SECRET_ID: "{{resolve:ssm:/serverless-toolbox/secrets}}"
          SHOULD_COMMIT: !If [IsProduction, 'true', 'false']

  FormatSocialPostEventFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - format-social-post-event.mjs
    Properties:
      Handler: format-social-post-event.handler
      Policies:
        - AWSLambdaBasicExecutionRole

  AnalyzePostStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/analyze.asl.json
      DefinitionSubstitutions:
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        MarkdownToText: !GetAtt MarkdownToTextFunction.Arn
        FormatSocialPostEvent: !GetAtt FormatSocialPostEventFunction.Arn
        AskChatGPT: "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
        S3BucketName: !Ref BucketName
        PollyCompleteTopic: !Ref TextSynthesisCompleteTopic
        StartSynthesisTask: !Sub arn:${AWS::Partition}:states:::aws-sdk:polly:startSpeechSynthesisTask
        DynamoDbPutAndWait: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:putItem.waitForTaskToken
        TableName: !Ref BlogAnalysisTable
        DynamoDbDeleteItem: !Sub arn:${AWS::Partition}:states:::dynamodb:deleteItem
        DynamoDbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        S3PutObjectAcl: !Sub arn:${AWS::Partition}:states:::aws-sdk:s3:putObjectAcl
        UpdateInGitHub: !GetAtt UpdateInGitHubFunction.Arn
        DynamoDbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt MarkdownToTextFunction.Arn
                - "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
                - !GetAtt UpdateInGitHubFunction.Arn
                - !GetAtt FormatSocialPostEventFunction.Arn
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
              Resource: !GetAtt BlogAnalysisTable.Arn
            - Effect: Allow
              Action:
                - polly:StartSpeechSynthesisTask
                - polly:GetSpeechSynthesisTask
                - polly:ListSpeechSynthesisTasks
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: !Sub arn:${AWS::Partition}:s3:::${BucketName}/audio/*
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref TextSynthesisCompleteTopic
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Events:
        EventInvocation:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Process New Blog
