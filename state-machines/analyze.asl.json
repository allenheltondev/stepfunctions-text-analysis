{
  "Comment": "Analyze blog data and save results",
  "StartAt": "Get Idempotency Record",
  "States": {
    "Get Idempotency Record": {
      "Type": "Task",
      "Resource": "${DynamoDbGetItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.detail.key"
          },
          "sk": {
            "S": "blog"
          }
        }
      },
      "Next": "Has Been Processed?",
      "ResultPath": "$.record"
    },
    "Has Been Processed?": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.record.Item",
            "IsPresent": true
          },
          "Next": "Set Record To In Progress"
        },
        {
          "And": [
            {
              "Variable": "$.record.Item",
              "IsPresent": true
            },
            {
              "Variable": "$.record.Item.status.S",
              "StringEquals": "failed"
            }
          ],
          "Next": "Set Record To In Progress"
        }
      ],
      "Default": "Success - Duplicate Request"
    },
    "Set Record To In Progress": {
      "Type": "Task",
      "Resource": "${DynamoDbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.detail.key"
          },
          "sk": {
            "S": "blog"
          }
        },
        "UpdateExpression": "SET #status = :status",
        "ExpressionAttributeNames": {
          "#status": "status"
        },
        "ExpressionAttributeValues": {
          ":status": {
            "S": "in progress"
          }
        }
      },
      "Next": "Is Scheduled In The Future?",
      "ResultPath": null
    },
    "Is Scheduled In The Future?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.detail.futureDate",
          "IsPresent": true,
          "Next": "Wait For Future Date"
        }
      ],
      "Default": "Transform Markdown"
    },
    "Wait For Future Date": {
      "Type": "Wait",
      "TimestampPath": "$.detail.futureDate",
      "Next": "Transform Markdown"
    },
    "Transform Markdown": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${MarkdownToText}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Update Record - Failure"
        }
      ],
      "Next": "Analyze",
      "ResultPath": "$.transformed"
    },
    "Update Record - Failure": {
      "Type": "Task",
      "Resource": "${DynamoDbUpdateItem}",
      "Parameters": {
        "TableName": "${TableName}",
        "Key": {
          "pk": {
            "S.$": "$$.Execution.Input.detail.key"
          },
          "sk": {
            "S": "blog"
          }
        },
        "UpdateExpression": "SET #status = :status",
        "ExpressionAttributeNames": {
          "#status": "status"
        },
        "ExpressionAttributeValues": {
          ":status": {
            "S": "failed"
          }
        }
      },
      "End": true,
      "ResultPath": null
    },
    "Analyze": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get Summary From ChatGPT",
          "States": {
            "Get Summary From ChatGPT": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "Parameters": {
                "FunctionName": "${AskChatGPT}",
                "Payload": {
                  "conversationKey.$": "States.Format('{}-metadata', $$.Execution.Input.detail.key)",
                  "systemContext": "You are a professional content summarizer specializing in presenting technical content to non-technical people and beginners.",
                  "query.$": "States.Format('Summarize the content of this blog with an OG description for high SEO ranking. It should mimic the authors tone and be in the POV of the author: {}', $.transformed.Payload.text)",
                  "rememberResponse": true
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.description",
              "Next": "Meta and Social Posts"
            },
            "Meta and Social Posts": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Get Meta Info From ChatGPT",
                  "States": {
                    "Get Meta Info From ChatGPT": {
                      "Type": "Task",
                      "Resource": "${LambdaInvoke}",
                      "Parameters": {
                        "FunctionName": "${AskChatGPT}",
                        "Payload": {
                          "conversationKey.$": "States.Format('{}-metadata', $$.Execution.Input.detail.key)",
                          "query": "Create a json object for that content with the following properties: sentiment, tone, writingStyle, and skillLevel. Sentiment should have a single word value. WritingStyle should summarize the writer's style in fewer than 30 words. SkillLevel should rate the writing skill level on a scale of 1-10.",
                          "outputFormat": "json"
                        }
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "ResultPath": "$.meta",
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Create Social Media Posts",
                  "States": {
                    "Create Social Media Posts": {
                      "Type": "Task",
                      "Resource": "${LambdaInvoke}",
                      "Parameters": {
                        "FunctionName": "${AskChatGPT}",
                        "Payload": {
                          "conversationKey.$": "States.Format('{}-metadata', $$.Execution.Input.detail.key)",
                          "query.$": "States.Format('Create 8 twitter posts that will advertise this blog over the next 2 months. Create them in the writers tone and style and use at most one emoji. Include this link to the article at the end of the tweet: https://readysetcloud.io{}. Respond only with a JSON array of strings, each message as a new string and do not number them', $$.Execution.Input.detail.url)",
                          "outputFormat": "json"
                        }
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Format Scheduler Event",
                      "ResultPath": "$.messages"
                    },
                    "Format Scheduler Event": {
                      "Type": "Task",
                      "Resource": "${LambdaInvoke}",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "FunctionName": "${FormatSocialPostEvent}",
                        "Payload": {
                          "messages.$": "$.messages.Payload.response",
                          "campaign.$": "$.fileName",
                          "platform": "twitter"
                        }
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Schedule Social Posts"
                    },
                    "Schedule Social Posts": {
                      "Type": "Task",
                      "Resource": "${EventBridgePutEvents}",
                      "Parameters": {
                        "Entries": [
                          {
                            "Detail": {
                              "messages.$": "$.messages"
                            },
                            "DetailType": "Schedule Social Post",
                            "Source": "Analyze Text State Machine"
                          }
                        ]
                      },
                      "End": true
                    }
                  }
                }
              ],
              "ResultPath": "$.metaDescription",
              "End": true
            }
          }
        },
        {
          "StartAt": "Has audio already?",
          "States": {
          "Has audio already?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.transformed.Payload.metadata.audio",
                  "IsPresent": true,
                  "Next": "Pass through audio"
                }
              ],
              "Default": "Start Text To Speech"
            },
            "Pass through audio": {
              "Type": "Pass",
              "End": true,
              "Parameters": {
                "SynthesisTask": {
                  "OutputUri.$": "$.transformed.Payload.metadata.audio"
                }
              }
            },
            "Start Text To Speech": {
              "Type": "Task",
              "Parameters": {
                "Engine": "neural",
                "OutputFormat": "mp3",
                "OutputS3BucketName": "${S3BucketName}",
                "OutputS3KeyPrefix": "audio/",
                "Text.$": "$.transformed.Payload.text",
                "VoiceId": "Matthew",
                "SnsTopicArn": "${PollyCompleteTopic}"
              },
              "Resource": "${StartSynthesisTask}",
              "Next": "Save Synthesis Detail"
            },
            "Save Synthesis Detail": {
              "Type": "Task",
              "Resource": "${DynamoDbPutAndWait}",
              "Parameters": {
                "TableName": "${TableName}",
                "Item": {
                  "pk": {
                    "S.$": "$.SynthesisTask.TaskId"
                  },
                  "sk": {
                    "S": "text-synthesis"
                  },
                  "taskToken": {
                    "S.$": "$$.Task.Token"
                  },
                  "stepFunctionsExecutionId": {
                    "S.$": "$$.Execution.Id"
                  }
                }
              },
              "Next": "Clean Up After Synthesis",
              "ResultPath": null
            },
            "Clean Up After Synthesis": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Remove Synthesis Detail",
                  "States": {
                    "Remove Synthesis Detail": {
                      "Type": "Task",
                      "Resource": "${DynamoDbDeleteItem}",
                      "Parameters": {
                        "TableName": "${TableName}",
                        "Key": {
                          "pk": {
                            "S.$": "$.SynthesisTask.TaskId"
                          },
                          "sk": {
                            "S": "synthesis-task"
                          }
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Make Audio Public",
                  "States": {
                    "Make Audio Public": {
                      "Type": "Task",
                      "End": true,
                      "Parameters": {
                        "Bucket": "${S3BucketName}",
                        "Key.$": "States.Format('audio/.{}.mp3', $.SynthesisTask.TaskId)",
                        "Acl": "public-read"
                      },
                      "Resource": "${S3PutObjectAcl}"
                    }
                  }
                }
              ],
              "End": true,
              "ResultPath": null
            }
          }
        }
      ],
      "Next": "Format Processed Data",
      "ResultPath": "$.analysis"
    },
    "Format Processed Data": {
      "Type": "Pass",
      "Parameters": {
        "metadata.$": "$.analysis[0].metaDescription[0].meta.Payload.response",
        "description.$": "$.analysis[0].description.Payload.response",
        "audio.$": "$.analysis[1].SynthesisTask.OutputUri",
        "originalMetadata.$": "$.transformed.Payload.metadata",
        "markdown.$": "$.transformed.Payload.markdown",
        "wordCount.$": "$.transformed.Payload.wordCount"
      },
      "Next": "Save Processed Data"
    },
    "Save Processed Data": {
      "Type": "Parallel",
      "End": true,
      "Branches": [
        {
          "StartAt": "Update in GitHub",
          "States": {
            "Update in GitHub": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${UpdateInGitHub}",
                "Payload": {
                  "originalMetadata.$": "$.originalMetadata",
                  "audio.$": "$.audio",
                  "newMetadata.$": "$.metadata",
                  "description.$": "$.description",
                  "fileName.$": "$.fileName",
                  "markdown.$": "$.markdown"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Update DynamoDB",
          "States": {
            "Update DynamoDB": {
              "Type": "Task",
              "Resource": "${DynamoDbUpdateItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Key": {
                  "pk": {
                    "S.$": "$$.Execution.Input.detail.url"
                  },
                  "sk": {
                    "S": "blog"
                  }
                },
                "UpdateExpression": "SET analysis = :analysis, audio = :audio, processedOn = :processedOn",
                "ExpressionAttributeValues": {
                  ":processedOn": {
                    "S.$": "$$.Execution.StartTime"
                  },
                  ":audio": {
                    "S.$": "$.audio"
                  },
                  ":analysis": {
                    "M": {
                      "sentiment": {
                        "S.$": "$.metadata.sentiment"
                      },
                      "tone": {
                        "S.$": "$.metadata.tone"
                      },
                      "wordCount": {
                        "N.$": "States.Format('{}', $.wordCount)"
                      },
                      "writingStyle": {
                        "S.$": "$.metadata.writingStyle"
                      },
                      "skillLevel": {
                        "N.$": "States.Format('{}', $.metadata.skillLevel)"
                      }
                    }
                  }
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Update Record - Success",
          "States": {
            "Update Record - Success": {
              "Type": "Task",
              "Resource": "${DynamoDbUpdateItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Key": {
                  "pk": {
                    "S.$": "$$.Execution.Input.detail.key"
                  },
                  "sk": {
                    "S": "blog"
                  }
                },
                "UpdateExpression": "SET #status = :status",
                "ExpressionAttributeNames": {
                  "#status": "status"
                },
                "ExpressionAttributeValues": {
                  ":status": {
                    "S": "succeeded"
                  }
                }
              },
              "ResultPath": null,
              "End": true
            }
          }
        }
      ]
    },
    "Success - Duplicate Request": {
      "Type": "Succeed",
      "Comment": "This blog has already been processed"
    }
  }
}
